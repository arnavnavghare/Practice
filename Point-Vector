#include "StdAfx.h"
#include <iostream>
#include<math.h>
#define DELTA 1e-6

using namespace std;

class vector;

class point{
	double X,Y,Z;
	public:
	friend void get_point(point);
	friend double dist_btw_points(point, point);
	friend void point_transform(point &o3, double dx, double dy, double dz = 0);
	friend vector position_vector(point);
	point(double x=0, double y=0, double z=0){
		X=x;
		Y=y;
		Z=z;
	}
	~point(){
	};
};

void get_point(point o){
	cout<<"("<<o.X<<","<<o.Y<<","<<o.Z<<")"<<endl;
}

double dist_btw_points(point o1, point o2){
	double dx = o2.X-o1.X;
	double dy = o2.Y-o1.Y;
	double D = pow((pow(dx,2))+(pow(dy,2)),0.5);
	return D;
}

void point_transform(point &o3, double dx, double dy, double dz){
	o3.X+=dx;
	o3.Y+=dy;
	o3.Z+=dz;
}

void point_overlap(point o1, point o2){
	if (dist_btw_points(o1, o2)<DELTA){
		cout<<"The given points overlaps"<<endl;
	}
	else {
	cout<<"The given points does not overlap"<<endl;
	}
}

class vector{
	double X, Y, Z;
public:
	friend void get_vector(vector);
	friend vector scale_vector(vector &v, double);
	friend double vector_magnitude(vector v);
	friend vector reverse_vector(vector &vec);
	friend int vector_dot_product(vector vec1, vector vec2);
	friend vector vector_cross_product(vector vec1, vector vec2);
	vector(double x=0, double y=0, double z=0){
		X=x;
		Y=y;
		Z=z;
	}
	vector operator + (vector v2){
		vector v3((X+v2.X),(Y+v2.Y),(Z+v2.Z));
		return v3;
	}
	vector operator - (vector v2){
		vector v3((X-v2.X),(Y-v2.Y),(Z-v2.Z));
		return v3;
	}
	~vector(){
	}
};

void get_vector(vector v){
	if (v.X>=0 && v.Y>=0 && v.Z>=0){
		cout<<v.X<<"i+"<<v.Y<<"j+"<<v.Z<<"k"<<endl;
	}
	else if (v.X>=0 && v.Y>=0 && v.Z<=0){
			cout<<v.X<<"i+"<<v.Y<<"j"<<v.Z<<"k"<<endl;
	}
	else if (v.X>=0 && v.Y<=0 && v.Z>=0){
			cout<<v.X<<"i"<<v.Y<<"j+"<<v.Z<<"k"<<endl;
	}
	else if (v.X>=0 && v.Y<=0 && v.Z<=0){
			cout<<v.X<<"i"<<v.Y<<"j"<<v.Z<<"k"<<endl;
	}
	else if (v.X<=0 && v.Y>=0 && v.Z>=0){
			cout<<v.X<<"i+"<<v.Y<<"j+"<<v.Z<<"k"<<endl;
	}
	else if (v.X<=0 && v.Y>=0 && v.Z<=0){
			cout<<v.X<<"i+"<<v.Y<<"j"<<v.Z<<"k"<<endl;
	}
	else if (v.X<=0 && v.Y<=0 && v.Z>=0){
			cout<<v.X<<"i"<<v.Y<<"j+"<<v.Z<<"k"<<endl;
	}
	else{
		cout<<v.X<<"i"<<v.Y<<"j"<<v.Z<<"k"<<endl;
	}
}

vector scale_vector(vector &v, double SF){
	v.X=v.X*SF;
	v.Y=v.Y*SF;
	v.Z=v.Z*SF;
	return v;
}

double vector_magnitude(vector v){
	double m = pow(pow(v.X,2)+pow(v.Y,2)+pow(v.Z,2),0.5);
	return m;
}

vector position_vector(point o){
	vector vec(o.X,o.Y,o.Z);
	return vec;
}

vector vector_using_points(point o1, point o2){
	vector vec1=position_vector(o1);
	vector vec2=position_vector(o2);
	vector vec;
	if (vector_magnitude(vec1)>vector_magnitude(vec2)){
		vec = (vec1-vec2);
	}
	else{
		vec = (vec2-vec1);
	}
	return vec;
}

vector reverse_vector(vector &vec){
	vec.X=-vec.X;
	vec.Y=-vec.Y;
	vec.Z=-vec.Z;
	return vec;
}

int vector_dot_product(vector vec1, vector vec2){
	int dot_product;
	dot_product=vec1.X*vec2.X+vec1.Y*vec2.Y+vec1.Z*vec2.Z;
	return dot_product;
}

vector vector_cross_product(vector vec1, vector vec2){
	vector vec;
	vec.X = vec1.Y*vec2.Z-vec1.Z*vec2.Y;
	vec.Y = vec1.Z*vec2.X-vec1.X*vec2.Z;
	vec.Z = vec1.X*vec2.Y-vec1.Y*vec2.X;
	return vec;
}

int main(){
	vector vec1(1,2,3), vec2(4,5,6);
	get_vector(vec2-vec1);
	return 0;
} 
